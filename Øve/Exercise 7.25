import numpy

class Polynomial(object):
    def __init__(self, coefficients):
        self.coeff = coefficients

    def __call__(self, x):
        s = 0
        for i in range(len(self.coeff)):
            s += self.coeff[i]*x**i
        return s

    def __add__(self, other):
        if len(self.coeff) > len(other.coeff):
            result_coeff = self.coeff[:] # copy
            for i in range(len(other.coeff)):
                result_coeff[i] += other.coeff[i]

        else:
            result_coeff = [0]*len(other.coeff)
            result_coeff[:len(self.coeff)] = self.coeff[:]
            for i in range(len(self.coeff)):
                result_coeff[i] -= other.coeff[i]
        return Polynomial(result_coeff)

    def __sub__(self, other):
        longest = max(len(self.coeff), len(other.coeff))
        result_coeff = [0]*longest

        result_coeff[0:len(self.coeff)] = self.coeff[:]

        for i in range(len(other.coeff)):
            result_coeff[i] -= other.coeff[i]
        return Polynomial(result_coeff)
    def __str__(self):
        s = ''
        for i in range(0, len(self.coeff)):
            if self.coeff[i] != 0:
                s += ' + %g*x^%d' % (self.coeff[i], i)
        s = s.replace('+ -', '- ')
        s = s.replace('x^0', '1')
        s = s.replace(' 1*', ' ')
        s = s.replace('x^1 ', 'x ')
        if s[0:3] == ' + ':
            s = s[3:]
        if s[0:3] == ' - ':
            s = '-' + s[3:]
        return s

if __name__ == '__main__':
    import sys
    if len(sys.argv) >= 2 and sys.argv[1] == 'verify':
        test_Polynomial()
    print("demo:")
    p1 = Polynomial([1, -1])
    p2 = Polynomial([0,1,0,0,-6,-1])
    p3 = p1-p2
    p4 = p2-p1
    print(p3)
    print(p4)

