import numpy

class Polynomial:
    def __init__(self, coefficients):
        self.coeff = coefficients

    def __clall__(self, x):
        s  = 0
        for i in range(len(self.coeff)):
            s += self.coeff[i]*x**i
        return s

    def __add__(self, other):
        if len(self.coeff) > len(other.coeff):
            result_coeff = self.coeff[:] # copy
            for i in range(len(other.coeff)):
                result_coeff[i] += other.coeff[i]

        else:
            result_coeff = [0]*len(other.coeff)
            result_coeff[:len(self.coeff)] = self.coeff[:]
            for i in range(len(self.coeff)):
                result_coeff[i] += other.coeff[i]
        return Polynomial(result_coeff)

    def __sub__(self, other):
        longest = max(len(self.coeff), len(other.coeff))
        result_coeff = [0]*longest

        result_coeff[0:len(self.coeff)] = self.coeff[:]

        for i in range(len(other.coeff)):
            result_coeff[i] -= other.coeff[i]
        return Polynomial(result_coeff)
    def __str__(self):
        s = ''
        for i in range(0, len(self.coeff)):
            if self.coeff[i] != 0:
                s += ' + %g*x^%d' % (self.coeff[i], i)
        s = s.replace('+ -', '- ')
        s = s.replace('x^0', '1')
        s = s.replace(' 1*', ' ')
        s = s.replace('x^1 ', 'x ')
        if s[0:3] == ' + ':
            s = s[3:]
        if s[0:3] == ' - ':
            s = '-' + s[3:]
        return s

class Parabola(Polynomial):
    def __init__(self,c0,c1,c2):
        coeff = [c0,c1,c2]
        Polynomial.__init__(self,coeff)

class Line(Parabola):
    def __init__(self,c0,c1):
        Parabola.__init__(self,c0,c1,0)


p1 = Parabola(1,1,1) # 1+x+x^2
p2 = Parabola(0,2,2) # 2x+2x^2
print(p1)
print(p2)
print(p1+p2)

l2 = Line(2,2) #2+2x
print(p1+l2)
print(type(p1),type(l2),type(p1+l2))

